// <auto-generated />
using System;
using Assembly.RealEstateManagement.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assembly.RealEstateManagement.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250227153825_InitialState")]
    partial class InitialState
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.AdministrativeUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("AdministrativeNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AddressId");

                    b.ToTable("AdministrativeUsers");
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.AdministrativeUserAllContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdministrativeUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdministrativeUserId");

                    b.ToTable("AdministrativeUserAllContacts");
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.AdministrativeUserPersonalContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdministrativeUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdministrativeUserId");

                    b.ToTable("AdminativeUserPersonalContacts");
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("AgentNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AddressId");

                    b.HasIndex("ManagerId");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.AgentAllContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.ToTable("AgentAllContacts");
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.AgentPersonalContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.ToTable("AgentPersonalContacts");
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRegistered")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AddressId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.FavoriteProperties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("PropertyId");

                    b.ToTable("FavoriteProperties");
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ManagerNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AddressId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.ManagerAllContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("ManagerAllContacts");
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.ManagerPersonalContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("ManagerPersonalContacts");
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<int>("Availability")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceBySquareMeter")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("PropertyType")
                        .HasColumnType("int");

                    b.Property<decimal>("SizeBySquareMeters")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("AgentId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.PropertyImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyImage");
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int>("RoomType")
                        .HasColumnType("int");

                    b.Property<double>("Size")
                        .HasColumnType("float");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.Visit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("ClientId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.AdministrativeUser", b =>
                {
                    b.HasOne("Assembly.RealEstateManagement.Domain.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assembly.RealEstateManagement.Domain.Model.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Assembly.RealEstateManagement.Domain.Model.Name", "Name", b1 =>
                        {
                            b1.Property<int>("AdministrativeUserId")
                                .HasColumnType("int");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName");

                            b1.Property<string>("MiddleNames")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("MiddleNames");

                            b1.HasKey("AdministrativeUserId");

                            b1.ToTable("AdministrativeUsers");

                            b1.WithOwner()
                                .HasForeignKey("AdministrativeUserId");
                        });

                    b.Navigation("Account");

                    b.Navigation("Address");

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.AdministrativeUserAllContact", b =>
                {
                    b.HasOne("Assembly.RealEstateManagement.Domain.Model.AdministrativeUser", "AdministrativeUser")
                        .WithMany("AdministrativeUsersAllContact")
                        .HasForeignKey("AdministrativeUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Assembly.RealEstateManagement.Domain.Model.Contact", "Contact", b1 =>
                        {
                            b1.Property<int>("AdministrativeUserAllContactId")
                                .HasColumnType("int");

                            b1.Property<int>("ContactType")
                                .HasColumnType("int")
                                .HasColumnName("ContactType");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Value");

                            b1.HasKey("AdministrativeUserAllContactId");

                            b1.ToTable("AdministrativeUserAllContacts");

                            b1.WithOwner()
                                .HasForeignKey("AdministrativeUserAllContactId");
                        });

                    b.OwnsOne("Assembly.RealEstateManagement.Domain.Model.Name", "Name", b1 =>
                        {
                            b1.Property<int>("AdministrativeUserAllContactId")
                                .HasColumnType("int");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName");

                            b1.Property<string>("MiddleNames")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("MiddleNames");

                            b1.HasKey("AdministrativeUserAllContactId");

                            b1.ToTable("AdministrativeUserAllContacts");

                            b1.WithOwner()
                                .HasForeignKey("AdministrativeUserAllContactId");
                        });

                    b.Navigation("AdministrativeUser");

                    b.Navigation("Contact")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.AdministrativeUserPersonalContact", b =>
                {
                    b.HasOne("Assembly.RealEstateManagement.Domain.Model.AdministrativeUser", "AdministrativeUser")
                        .WithMany("AdministrativeUsersPersonalContact")
                        .HasForeignKey("AdministrativeUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Assembly.RealEstateManagement.Domain.Model.Contact", "Contact", b1 =>
                        {
                            b1.Property<int>("AdministrativeUserPersonalContactId")
                                .HasColumnType("int");

                            b1.Property<int>("ContactType")
                                .HasColumnType("int")
                                .HasColumnName("ContactType");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Value");

                            b1.HasKey("AdministrativeUserPersonalContactId");

                            b1.ToTable("AdminativeUserPersonalContacts");

                            b1.WithOwner()
                                .HasForeignKey("AdministrativeUserPersonalContactId");
                        });

                    b.Navigation("AdministrativeUser");

                    b.Navigation("Contact")
                        .IsRequired();
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.Agent", b =>
                {
                    b.HasOne("Assembly.RealEstateManagement.Domain.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assembly.RealEstateManagement.Domain.Model.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assembly.RealEstateManagement.Domain.Model.Manager", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("Assembly.RealEstateManagement.Domain.Model.Name", "Name", b1 =>
                        {
                            b1.Property<int>("AgentId")
                                .HasColumnType("int");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName");

                            b1.Property<string>("MiddleNames")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("MiddleNames");

                            b1.HasKey("AgentId");

                            b1.ToTable("Agents");

                            b1.WithOwner()
                                .HasForeignKey("AgentId");
                        });

                    b.Navigation("Account");

                    b.Navigation("Address");

                    b.Navigation("Manager");

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.AgentAllContact", b =>
                {
                    b.HasOne("Assembly.RealEstateManagement.Domain.Model.Agent", "Agent")
                        .WithMany("AgentAllContact")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Assembly.RealEstateManagement.Domain.Model.Contact", "Contact", b1 =>
                        {
                            b1.Property<int>("AgentAllContactId")
                                .HasColumnType("int");

                            b1.Property<int>("ContactType")
                                .HasColumnType("int")
                                .HasColumnName("ContactType");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Value");

                            b1.HasKey("AgentAllContactId");

                            b1.ToTable("AgentAllContacts");

                            b1.WithOwner()
                                .HasForeignKey("AgentAllContactId");
                        });

                    b.OwnsOne("Assembly.RealEstateManagement.Domain.Model.Name", "Name", b1 =>
                        {
                            b1.Property<int>("AgentAllContactId")
                                .HasColumnType("int");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName");

                            b1.Property<string>("MiddleNames")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("MiddleNames");

                            b1.HasKey("AgentAllContactId");

                            b1.ToTable("AgentAllContacts");

                            b1.WithOwner()
                                .HasForeignKey("AgentAllContactId");
                        });

                    b.Navigation("Agent");

                    b.Navigation("Contact")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.AgentPersonalContact", b =>
                {
                    b.HasOne("Assembly.RealEstateManagement.Domain.Model.Agent", "Agent")
                        .WithMany("AgentPersonalContact")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Assembly.RealEstateManagement.Domain.Model.Contact", "Contact", b1 =>
                        {
                            b1.Property<int>("AgentPersonalContactId")
                                .HasColumnType("int");

                            b1.Property<int>("ContactType")
                                .HasColumnType("int")
                                .HasColumnName("ContactType");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Value");

                            b1.HasKey("AgentPersonalContactId");

                            b1.ToTable("AgentPersonalContacts");

                            b1.WithOwner()
                                .HasForeignKey("AgentPersonalContactId");
                        });

                    b.Navigation("Agent");

                    b.Navigation("Contact")
                        .IsRequired();
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.Client", b =>
                {
                    b.HasOne("Assembly.RealEstateManagement.Domain.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assembly.RealEstateManagement.Domain.Model.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Assembly.RealEstateManagement.Domain.Model.Name", "Name", b1 =>
                        {
                            b1.Property<int>("ClientId")
                                .HasColumnType("int");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName");

                            b1.Property<string>("MiddleNames")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("MiddleNames");

                            b1.HasKey("ClientId");

                            b1.ToTable("Clients");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.Navigation("Account");

                    b.Navigation("Address");

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.Comment", b =>
                {
                    b.HasOne("Assembly.RealEstateManagement.Domain.Model.Client", null)
                        .WithMany("Comments")
                        .HasForeignKey("ClientId");

                    b.HasOne("Assembly.RealEstateManagement.Domain.Model.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.FavoriteProperties", b =>
                {
                    b.HasOne("Assembly.RealEstateManagement.Domain.Model.Client", null)
                        .WithMany("FavoriteProperties")
                        .HasForeignKey("ClientId");

                    b.HasOne("Assembly.RealEstateManagement.Domain.Model.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.Manager", b =>
                {
                    b.HasOne("Assembly.RealEstateManagement.Domain.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assembly.RealEstateManagement.Domain.Model.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Assembly.RealEstateManagement.Domain.Model.Name", "Name", b1 =>
                        {
                            b1.Property<int>("ManagerId")
                                .HasColumnType("int");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName");

                            b1.Property<string>("MiddleNames")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("MiddleNames");

                            b1.HasKey("ManagerId");

                            b1.ToTable("Managers");

                            b1.WithOwner()
                                .HasForeignKey("ManagerId");
                        });

                    b.Navigation("Account");

                    b.Navigation("Address");

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.ManagerAllContact", b =>
                {
                    b.HasOne("Assembly.RealEstateManagement.Domain.Model.Manager", "Manager")
                        .WithMany("ManagerAllContacts")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Assembly.RealEstateManagement.Domain.Model.Contact", "Contact", b1 =>
                        {
                            b1.Property<int>("ManagerAllContactId")
                                .HasColumnType("int");

                            b1.Property<int>("ContactType")
                                .HasColumnType("int")
                                .HasColumnName("ContactType");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Value");

                            b1.HasKey("ManagerAllContactId");

                            b1.ToTable("ManagerAllContacts");

                            b1.WithOwner()
                                .HasForeignKey("ManagerAllContactId");
                        });

                    b.OwnsOne("Assembly.RealEstateManagement.Domain.Model.Name", "Name", b1 =>
                        {
                            b1.Property<int>("ManagerAllContactId")
                                .HasColumnType("int");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName");

                            b1.Property<string>("MiddleNames")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("MiddleNames");

                            b1.HasKey("ManagerAllContactId");

                            b1.ToTable("ManagerAllContacts");

                            b1.WithOwner()
                                .HasForeignKey("ManagerAllContactId");
                        });

                    b.Navigation("Contact")
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.ManagerPersonalContact", b =>
                {
                    b.HasOne("Assembly.RealEstateManagement.Domain.Model.Manager", "Manager")
                        .WithMany("ManagerPersonalContact")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Assembly.RealEstateManagement.Domain.Model.Contact", "Contact", b1 =>
                        {
                            b1.Property<int>("ManagerPersonalContactId")
                                .HasColumnType("int");

                            b1.Property<int>("ContactType")
                                .HasColumnType("int")
                                .HasColumnName("ContactType");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Value");

                            b1.HasKey("ManagerPersonalContactId");

                            b1.ToTable("ManagerPersonalContacts");

                            b1.WithOwner()
                                .HasForeignKey("ManagerPersonalContactId");
                        });

                    b.Navigation("Contact")
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.Property", b =>
                {
                    b.HasOne("Assembly.RealEstateManagement.Domain.Model.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assembly.RealEstateManagement.Domain.Model.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.PropertyImage", b =>
                {
                    b.HasOne("Assembly.RealEstateManagement.Domain.Model.Property", null)
                        .WithMany("PropertyImages")
                        .HasForeignKey("PropertyId");
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.Rating", b =>
                {
                    b.HasOne("Assembly.RealEstateManagement.Domain.Model.Client", null)
                        .WithMany("Ratings")
                        .HasForeignKey("ClientId");

                    b.HasOne("Assembly.RealEstateManagement.Domain.Model.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.Room", b =>
                {
                    b.HasOne("Assembly.RealEstateManagement.Domain.Model.Property", null)
                        .WithMany("Rooms")
                        .HasForeignKey("PropertyId");
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.Visit", b =>
                {
                    b.HasOne("Assembly.RealEstateManagement.Domain.Model.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Assembly.RealEstateManagement.Domain.Model.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Assembly.RealEstateManagement.Domain.Model.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Client");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.AdministrativeUser", b =>
                {
                    b.Navigation("AdministrativeUsersAllContact");

                    b.Navigation("AdministrativeUsersPersonalContact");
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.Agent", b =>
                {
                    b.Navigation("AgentAllContact");

                    b.Navigation("AgentPersonalContact");
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.Client", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FavoriteProperties");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.Manager", b =>
                {
                    b.Navigation("ManagerAllContacts");

                    b.Navigation("ManagerPersonalContact");
                });

            modelBuilder.Entity("Assembly.RealEstateManagement.Domain.Model.Property", b =>
                {
                    b.Navigation("PropertyImages");

                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
